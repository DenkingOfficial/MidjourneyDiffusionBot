import os
import json
from PIL import PngImagePlugin
import scripts.utils as utils
from types import SimpleNamespace
from pyrogram.types import InputMediaPhoto
from scripts.inline_buttons import txt2img_inline_keyboard


def txt2img(api, client, message, queue):
    args = utils.get_generation_args(message, utils.TXT2IMG_DEFAULT_VALUES)
    try:
        assert args
        assert utils.check_args(args, utils.TXT2IMG_AVAILABLE_ARGS)
    except AssertionError:
        return False

    args = SimpleNamespace(**args)

    job_name = "Generating"

    reply = message.reply_animation(
        animation="./static/noise.gif",
        caption=f"{job_name} image using prompt:\n**{args.prompt}**\n"
        f"\n"
        f"Position in queue: {str(len(queue))} "
        f"{'(Pending)' if len(queue) > 0 else ''}\n"
        f"\n"
        f"by [@{message.from_user.username}]"
        f"(tg://user?id={message.from_user.id})",
        quote=True,
    )

    job_id = utils.generate_job_id(16)

    utils.add_to_queue(
        reply,
        queue,
        job_id,
        job_name,
        args.prompt,
        message.from_user.username,
        message.from_user.id,
    )

    args.gen_prompt = utils.translate_prompt(args.prompt)
    if args.negative:
        args.gen_negative = utils.translate_prompt(args.negative)

    model = utils.json_to_dict("./config/models.json", args.model)
    model = SimpleNamespace(**model)

    override_settings = {}
    override_settings["sd_model_checkpoint"] = model.path
    override_payload = {"override_settings": override_settings}

    payload = (
        {
            "prompt": args.gen_prompt + model.styles[args.style]["prompt_addition"],
            "negative_prompt": model.styles[args.style]["negative_prompt"]
            + (f", {args.gen_negative}" if args.negative else ""),
            "cfg_scale": float(args.cfg),
            "sampler_index": "Euler",
            "steps": 10,
            "batch_size": int(args.count),
            "seed": int(args.seed),
            "restore_faces": args.facefix == "1",
        }
        | utils.ASPECT_RATIO_DICT[args.ar]
        | override_payload
    )

    result = api.txt2img(**payload)
    seeds = result.info["all_seeds"]

    folder_name = utils.clean_prompt(args.prompt) + f"-{job_id}"
    path = f"./output/txt2img/{message.from_user.username}/{folder_name}"
    isExists = os.path.exists(path)
    if not isExists:
        os.makedirs(path)

    # images_list = []
    for index, image in enumerate(result.images):
        # images_list.append(image)
        filename = f"{index}-{folder_name}-{seeds[index]}"
        png_info_result = api.png_info(image)
        pnginfo = PngImagePlugin.PngInfo()
        pnginfo.add_text("parameters", png_info_result.info)
        image.save(f"{path}/{filename}.png", pnginfo=pnginfo)

    grid = utils.create_image_grid(result.images)
    grid.save(f"{path}/{filename}-grid.jpg")

    seeds_str = [f"`{str(seed)}`" for seed in seeds]

    user_info = {
        "username": message.from_user.username,
        "user_id": message.from_user.id,
        "job_id": job_id,
        "orig_prompt": args.prompt,
        "negative_prompt": args.negative,
    }

    reply.edit_media(
        media=InputMediaPhoto(
            media=f"{path}/{filename}-grid.jpg",
            caption=f"Prompt: **{args.prompt}**\n"
            + (f"Negative Prompt: **{args.negative}**\n" if args.negative else "")
            + f"Seed: {', '.join(seeds_str)}\n"
            + "\n"
            + f"**Generated by [@{message.from_user.username}]"
            + f"(tg://user?id={message.from_user.id})**",
        ),
        reply_markup=txt2img_inline_keyboard(message, job_id, len(result.images), seeds),
    )
    with open(f"{path}/gen_info.json", "w") as fp:
        json.dump(result.parameters, fp)
    with open(f"{path}/user_info.json", "w") as fp:
        json.dump(user_info, fp)

    queue.pop(0)

    return True
